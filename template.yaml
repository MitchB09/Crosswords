AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: crosswords

Parameters:
  Stage:
    Type: String
    Description: The Stage where the application is running in, e.g., dev, prod.
  
Conditions:
  IsProduction: !Equals 
    - !Ref Stage
    - prod

Globals:
  Function:
    Timeout: 5
    Handler: index.handler
    Runtime: nodejs16.x
    Environment:
      Variables:
        BOARDS_TABLE: !Ref CrosswordTable

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolName: !Sub '${AWS::StackName}-${Stage}-user-pool'
      UsernameConfiguration:
        CaseSensitive: false
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: True
          RequireNumbers: False
          RequireSymbols: False
          RequireUppercase: True

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${AWS::StackName}-${Stage}-user-pool-client'
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - https://crosswords.bilensky.ca/
      LogoutURLs:
        - https://crosswords.bilensky.ca/
      AllowedOAuthScopes:
        - email
        - phone
        - openid

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Sub '${AWS::StackName}-${Stage}'
      UserPoolId: !Ref UserPool

  AutoApproveUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/cognito/auto-approve
      Policies:
      - AWSLambdaBasicExecutionRole # AWS Managed Policy
      Events:
        CognitoPreSignUpEvent:
          Type: Cognito
          Properties:
            UserPool:
              Ref: UserPool
            Trigger: PreSignUp

  CrosswordTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: 'userId'
          AttributeType: 'S'
        - AttributeName: 'id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'userId'
          KeyType: 'HASH'
        - AttributeName: 'id'
          KeyType: 'RANGE'
      BillingMode: PAY_PER_REQUEST

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'"
        AllowMethods: "'GET,POST,OPTIONS,PUT,DELETE'"
        MaxAge: "'600'"
      Domain: 
        DomainName: !If 
          - IsProduction 
          - !Sub crosswords-api.bilensky.ca
          - !Sub crosswords-dev-api.bilensky.ca
        CertificateArn: !Sub arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/be6c437a-760b-4ee4-9a89-a2bb7995e6ff

  GetBoards:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/list
      Policies:
      - AWSLambdaBasicExecutionRole # AWS Managed Policy
      - Version: '2012-10-17'         # Inline Policy
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:Query
            Resource: 
              - !GetAtt CrosswordTable.Arn
      Events:
        RestApiEvent:
          Type: Api
          Properties:
            Path: /boards
            Method: get
            Auth:
              Authorizer: NONE
            RestApiId:
              Ref: ApiGateway
  
  GetBoard:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/get
      Policies:
      - AWSLambdaBasicExecutionRole # AWS Managed Policy
      - Version: '2012-10-17'         # Inline Policy
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:Query
            Resource: 
              - !GetAtt CrosswordTable.Arn
      Events:
        RestApiEvent:
          Type: Api
          Properties:
            Path: /boards/{id}
            Method: get
            Auth:
              Authorizer: NONE
            RestApiId:
              Ref: ApiGateway
  
  CreateUpdateBoard:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: lambdas/create_update
        Policies:
          - AWSLambdaBasicExecutionRole # AWS Managed Policy
          - Version: '2012-10-17'         # Inline Policy
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: 
                  - !GetAtt CrosswordTable.Arn
        Events:
          CreateEvent:
            Type: Api
            Properties:
              Path: /boards
              Method: post
              Auth:
                Authorizer: NONE
              RestApiId:
                Ref: ApiGateway
          UpdateEvent:
            Type: Api
            Properties:
              Path: /boards/{id}
              Method: put
              Auth:
                Authorizer: NONE
              RestApiId:
                Ref: ApiGateway
  DeleteBoard:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: lambdas/delete
      Policies:
      - AWSLambdaBasicExecutionRole # AWS Managed Policy
      - Version: '2012-10-17'         # Inline Policy
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:DeleteItem
            Resource: 
              - !GetAtt CrosswordTable.Arn
      Events:
        RestApiEvent:
          Type: Api
          Properties:
            Path: /boards/{id}
            Method: delete
            RestApiId:
              Ref: ApiGateway

  S3Bucket:
    Type: AWS::S3::Bucket
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
      # Restricting access to cloudfront only.
        Statement:
          - Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"


  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Serverless website OA'

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: 
          - !If 
            - IsProduction 
            - !Sub crosswords.bilensky.ca
            - !Sub crosswords-dev.bilensky.ca
        Origins:
        - Id: s3-website
          DomainName: !GetAtt S3Bucket.DomainName
          S3OriginConfig:
            # Restricting Bucket access through an origin access identity
            OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        Enabled: true
        DefaultRootObject: index.html
        CustomErrorResponses: 
          - ErrorCachingMinTTL: 10
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultCacheBehavior:
          Compress: true
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: true
          TargetOriginId: s3-website
          ViewerProtocolPolicy : redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          SslSupportMethod: 'sni-only'
          AcmCertificateArn: !Sub arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/be6c437a-760b-4ee4-9a89-a2bb7995e6ff
          MinimumProtocolVersion: 'TLSv1.2_2019'

Outputs:
  S3Bucket: 
    Description: S3 Bucket Name
    Value: !Ref S3Bucket
  CognitoUserPool: 
    Description: Cognito User Pool Id
    Value: !Ref UserPool
  CognitoClient: 
    Description: Cognito Client Id
    Value: !Ref UserPoolClient
  ApiEndpoint:
    Description: API Gateway endpoint URL for Prod stage for GetLists function
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/
  CloudFrontDistribution:
    Description: CloudFront Distribution Id
    Value: !Ref CloudFrontDistribution
  CloudFrontDomain:
    Description: CloudFront Domain Name
    Value: !GetAtt CloudFrontDistribution.DomainName
